import Head from 'next/head'
import Main from "../components/Main"
import About from "../components/About"
import Skills from "../components/Skills"
import Projects from '@/components/Projects'
import { Octokit } from "octokit";




export default function Home({projects, languages}) {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <Main />
      <About />
      <Skills languages={languages}/>
      <Projects projects={projects}/>
    </>
  )
}

export async function getStaticProps(){
  const octokit = new Octokit({
    auth: process.env.GITHUB_API_TOKEN,
  })
  
  const resAllProjectsRaw = await octokit.request('GET /users/{username}/repos', {
    username: 'Adkirf',
    headers: {
      'X-GitHub-Api-Version': '2022-11-28'
    }
  })

  const allProjects = Object.keys(resAllProjectsRaw.data).map((project)=>{
    return resAllProjectsRaw.data[project];
  })

  const projects = await Promise.all(
    allProjects
      .filter(project => project.homepage) // Filter out projects with no homepage
      .map(async project => {
        const resProjectImgUri = `https://raw.githubusercontent.com/Adkirf/${project.name}/main/projectImg.png`;
        return {
          projectRaw: project,
          projectImg: resProjectImgUri,
        };
      })
  );
    
  let accumulator = {};
  const languages = await allProjects.reduce(async (acc, project) => {
    acc = await acc;
    const resProjectLanguages = await octokit.request('GET /repos/{owner}/{repo}/languages', {
      owner: 'Adkirf',
      repo: project.name,
      headers: {
        'X-GitHub-Api-Version': '2022-11-28'
      }
    })
    const projectLanguages = await resProjectLanguages.data;
    Object.entries(projectLanguages).forEach(([language, value]) => {

      accumulator[language] = (accumulator[language]? accumulator[language] : 0) + value;
    });
    return accumulator;
  },accumulator);

  return {
    props: {
      projects: projects,
      languages: languages,
    }
}
  
}
